{"ast":null,"code":"var _jsxFileName = \"/Users/ripplingadmin/voting-api/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, setMessage } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    votes: 0\n  });\n  const [candidates, setCandidates] = useState([]);\n  const [votes, setVotes] = useState('');\n  const handleChange = e => {\n    const value = e.target.value; // Destructure name and value from event target\n    setFormData(prevState => ({\n      ...prevState,\n      name: value // Use the input's name to update the corresponding property\n    }));\n  };\n  useEffect(() => {\n    // Fetch the message from the Express server\n    fetch('http://localhost:3001/get-candidates').then(response => response.json()).then(candidates => setCandidates(candidates)).catch(error => console.error('Error fetching data:', error));\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  const handleVote = async (name, e) => {\n    e.preventDefault();\n    console.log({\n      name: name\n    });\n    try {\n      const response = await fetch('http://localhost:3001/vote', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: name\n        })\n      });\n      const voteResult = await response.json();\n      console.log(voteResult);\n      setMessage(`Vote successfully cast for ${name}!`);\n      const updatedCandidates = candidates.map(candidate => {\n        if (candidate.name === name) {\n          return {\n            ...candidate,\n            votes: voteResult.vote\n          };\n        }\n        return candidate;\n      });\n      setCandidates(updatedCandidates);\n      // console.log(name)\n      if (!response.ok) {\n        console.log(response);\n        throw new Error('Network response was not ok');\n      }\n      // Handle success response, maybe clear form or show a success message\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle errors, maybe show an error message to the user\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3001/add_candidate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        console.log(response);\n        throw new Error('Network response was not ok');\n      }\n      // Handle success response, maybe clear form or show a success message\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle errors, maybe show an error message to the user\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"Candidate\",\n            value: formData.name,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [candidate.name, \" - Votes: \", candidate.name]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 6\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleVote(candidate.name, e),\n              children: \"Update Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 6\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9u0+Df40OVJ6ZViVS3qQUIT2JKU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","setMessage","jsxDEV","_jsxDEV","App","_s","formData","setFormData","name","votes","candidates","setCandidates","setVotes","handleChange","e","value","target","prevState","fetch","then","response","json","catch","error","console","handleVote","preventDefault","log","method","headers","body","JSON","stringify","voteResult","updatedCandidates","map","candidate","vote","ok","Error","handleSubmit","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onClick","index","_c","$RefreshReg$"],"sources":["/Users/ripplingadmin/voting-api/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, setMessage } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [formData, setFormData] = useState({\n    name: '',\n    votes: 0,\n  });\n  const [candidates, setCandidates] = useState([]);\n  const [votes, setVotes] = useState('')\n\n\n  const handleChange = (e) => {\n    const value = e.target.value; // Destructure name and value from event target\n    setFormData(prevState => ({\n      ...prevState,\n      name: value, // Use the input's name to update the corresponding property\n    }));\n  };\n\n  useEffect(() => {\n    // Fetch the message from the Express server\n    fetch('http://localhost:3001/get-candidates')\n      .then(response => response.json())\n      .then(candidates => setCandidates(candidates))\n      .catch(error => console.error('Error fetching data:', error));\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  const handleVote = async (name, e) => {\n    e.preventDefault();\n    console.log({ name: name })\n\n    try {\n      const response = await fetch('http://localhost:3001/vote', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: name }),\n      });\n      const voteResult = await response.json();\n      console.log(voteResult)\n      setMessage(`Vote successfully cast for ${name}!`);\n      const updatedCandidates = candidates.map(candidate => {\n        if (candidate.name === name) {\n          return { ...candidate, votes: voteResult.vote };\n        }\n        return candidate;\n      });\n      setCandidates(updatedCandidates);\n      // console.log(name)\n      if (!response.ok) {\n        console.log(response)\n        throw new Error('Network response was not ok');\n      }\n      // Handle success response, maybe clear form or show a success message\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle errors, maybe show an error message to the user\n    }\n    \n  \n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3001/add_candidate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n       \n        body: JSON.stringify(formData),\n      });\n      if (!response.ok) {\n        console.log(response)\n        throw new Error('Network response was not ok');\n      }\n      // Handle success response, maybe clear form or show a success message\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle errors, maybe show an error message to the user\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Name:</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"Candidate\"\n              value={formData.name}\n              onChange={handleChange}\n            />\n          </div>\n          <button onClick={handleSubmit} type=\"submit\">Submit</button>\n      <ul>\n        {candidates.map((candidate, index) => (\n          <div>\n     <li key={index}>{candidate.name} - Votes: {candidate.name}</li>\n     <button onClick={(e) => handleVote(candidate.name, e)}>Update Vote</button>        \n            </div>\n          ))}\n      </ul>\n      </form>\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}